{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div class=\\\"container-fluid text-center\\\">\\n  <h1>\\n    Apache Velcity Language (VTL) Formatter\\n  </h1>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"form-group col-md-6\\\">\\n      <label for=\\\"input\\\"><h3>Paste your VTL text here</h3></label>\\n      <textarea [(ngModel)]=\\\"text\\\" class=\\\"form-control\\\" id=\\\"input\\\" rows=\\\"35\\\" cols=\\\"20\\\"></textarea>\\n    </div>\\n    <div class=\\\"form-group col-md-6\\\">\\n      <label for=\\\"output\\\"><h3>Formatted text</h3></label>\\n      <textarea value=\\\"{{formattedText}}\\\" class=\\\"form-control\\\" id=\\\"output\\\" rows=\\\"35\\\" cols=\\\"20\\\"></textarea>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"row\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary btn-lg\\\" (click)=\\\"format()\\\">Format</button>\\n  </div>\\n</div>\\n\\n\"","import { Component } from '@angular/core';\nimport * as _ from \"lodash\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  text = \"\";\n  formattedText = \"\";\n\n  tabInList = [\"#if\", \"#foreach\"];\n  tabOutList = [\"#end\"];\n  tabInOutList = [\"#else\", \"#elseif\"];\n  conditions = [\"#if\", \"#elseif\", \"#foreach\"];\n\n  NEW_LINE = \"\\n\";\n\n  tabLen = 0;\n\n  format(): void {\n    let arr = _.split(this.text, \"\\n\");\n\n    arr.forEach(line => {\n\n      line = _.trim(line);\n      line = this.formatCondition(line);\n      this.formatIndentation(line);\n    });\n\n  }\n\n  formatCondition(line: string): string {\n    this.conditions.forEach(cond => {\n      let condWithSpace = cond + \" \";\n      if (_.startsWith(line, cond) && !_.startsWith(line, condWithSpace)) {\n        line = _.replace(line, cond, condWithSpace);\n        return line;\n      }\n    });\n    return line;\n  }\n\n  formatIndentation(line: string): void {\n    let firstWord = _.get(_.split(line, \" \"), 0, \"\");\n    if (_.includes(this.tabInOutList, firstWord)) {\n      this.tabLen--;\n      this.formattedText += this.getTab() + line + this.NEW_LINE;\n      this.tabLen++;\n    } else if (_.includes(this.tabInList, firstWord)) {\n      this.formattedText += this.getTab() + line + this.NEW_LINE;\n      this.tabLen++;\n    } else if (_.includes(this.tabOutList, firstWord)) {\n      this.tabLen--;\n      this.formattedText += this.getTab() + line + this.NEW_LINE;\n    } else {\n      this.formattedText += this.getTab() + line + this.NEW_LINE;\n    }\n  }\n\n  getTab(): string {\n    return _.repeat(\"\\t\", this.tabLen);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}